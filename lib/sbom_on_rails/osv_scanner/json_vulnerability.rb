module SbomOnRails
  module OsvScanner
    class JsonVulnerability
      attr_reader :vuln_id

      def initialize(json_data, groups, component)
        @json_data = json_data
        @component = component
        @groups = groups
        @vuln_id = json_data["id"]
      end

      def as_sbom_structure
        base_vuln = {
          "id" => @vuln_id,
          "bom-ref" => "vuln-osv-scanner-#{@vuln_id}",
          "description" => @json_data["summary"],
          "affects" => [
            { "ref" => @component["bom-ref"] }
          ],
          "tools" => {
            "components" => [
              {
                "type" => "application",
                "name" => "osv-scanner"
              }
            ]
          }
        }
        base_vuln["detail"] = @json_data["details"] if @json_data["details"]
        base_vuln["advisories"] = extract_advisories
        base_vuln["ratings"] = extract_ratings
        base_vuln
      end

      def merge(existing_vuln)
        existing_vuln["affects"] = (existing_vuln["affects"] + [{ "ref" => @component["bom-ref"] }]).uniq
        existing_vuln["advisories"] = (existing_vuln["advisories"] + extract_advisories).uniq
        existing_vuln["ratings"] = (existing_vuln["ratings"] + extract_ratings).uniq
        existing_vuln
      end

      private

      def extract_ratings
        severities = @json_data["severity"]
        severities ||= []
        dbs = @json_data["database_specific"]
        severity = severity_mapping(dbs["severity"])
        sev_num = max_group_severity
        return [{ "score" => sev_num, "severity" => severity }] unless severities.any?
        severities.map do |sev|
          meth = sev["type"]
          vector = sev["score"]
          sev_result = { "score" => sev_num, "severity" => severity }
          if meth && vector
            sev_method = map_severity_method(meth, vector)
            sev_result["method"] = sev_method
            sev_result["vector"] = vector
          end
          sev_result
        end
      end

      def map_severity_method(sev_meth, vec)
        case sev_meth
        when "CVSS_V3"
          if vec && vec.start_with?("CVSS:3.1")
            "CVSSv31"
          else
            "CVSSv3"
          end
        when "CVSS_V2"
          "CVSSv2"
        when "CVSS_V4"
          "CVSSv4"
        else
          "other"
        end
      end

      def max_group_severity
        return 0.0 unless @groups && @groups.any?
        @groups.map do |grp|
          ms = grp["max_severity"]
          ms ? ms.to_f : 0.0
        end.max
      end

      def severity_mapping(sev)
        case sev
        when "CRITICAL"
          "critical"
        when "HIGH"
          "high"
        when "MODERATE"
          "medium"
        when "LOW"
          "low"
        when "NONE"
          "none"
        else
          "unknown"
        end
      end

      def extract_advisories
        refs = @json_data["references"]
        return nil unless refs
        advisory_refs = refs.select do |ref|
          ref["type"] == "ADVISORY"
        end
        advisory_refs.map do |advr|
          {
            "url" => advr["url"]
          }
        end
      end
    end
  end
end
