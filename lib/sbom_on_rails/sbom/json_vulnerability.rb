module SbomOnRails
  module Sbom
    class JsonVulnerability
      attr_reader :data, :vuln_id

      def initialize(json_data)
        @data = json_data
        @vuln_id = json_data["id"]
      end

      def merge(other_vuln)
        other_data = other_vuln.data
        naive_array_merge(other_data, "affects")
        naive_array_merge(other_data, "ratings")
        naive_array_merge(other_data, "advisories")
        naive_array_merge(other_data, "references")
        merge_tools(other_data)
        select_larger_if_present(other_data, "description")
        select_larger_if_present(other_data, "detail")
        select_larger_if_present(other_data, "bom-ref")
        resolve_source(other_data)
        self
      end

      def as_sbom_structure
        @data
      end

      private

      # Will need to setup a hierarchy of sources.
      def resolve_source(other_data)
        my_value = @data["source"]
        other_value = other_data["source"]
        return unless other_value
        @data["source"] = other_value unless my_value
      end

      def select_larger_if_present(other_data, key)
        data_selections = [@data[key], other_data[key]].compact
        return unless data_selections.any?
        max_value = data_selections.max_by(&:length)
        @data[key] = max_value
      end

      def merge_tools(other_data)
        other_toolset = other_data["tools"]
        return unless other_toolset
        my_toolset = @data["tools"]
        my_toolset ||= {}
        my_components = my_toolset["components"]
        my_components ||= []
        my_services = my_toolset["services"]
        my_services ||= []
        other_components = other_toolset["components"]
        other_components ||= []
        other_services = other_toolset["services"]
        other_services ||= []
        merged_components = (my_components + other_components).uniq
        merged_services = (my_services + other_services).uniq
        merged_tool_data = {}
        merged_tool_data["components"] = merged_components if merged_components.any?
        merged_tool_data["services"] = merged_services if merged_services.any?
        return unless merged_tool_data.keys.any?
        @data["tools"] = merged_tool_data
      end

      def naive_array_merge(other_data, key)
        other_value = other_data[key]
        return unless other_value && other_value.any?
        existing_value = @data[key]
        existing_value ||= []
        @data[key] = (existing_value + other_value).uniq
      end
    end
  end
end